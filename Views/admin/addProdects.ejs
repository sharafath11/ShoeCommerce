<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Dashboard - Add Product</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <style>
      body {
        background-color: #f8f9fa;
      }
      .sidebar {
        height: 100vh;
        background-color: #343a40;
        padding-top: 20px;
      }
      .sidebar a {
        color: #ffffff;
        text-decoration: none;
        display: block;
        padding: 10px 20px;
      }
      .sidebar a:hover {
        background-color: #495057;
      }
      .form-container {
        margin: 30px;
      }
      .image-preview {
        max-width: 100%;
        height: 300px;
        display: none;
        margin-bottom: 10px;
      }
      .crop-container {
        margin-bottom: 20px;
      }
    </style>
  </head>
  <body>
    <div class="container-fluid">
      <div class="row">
        <!-- Sidebar -->
        <%- include('partials/sidebar') %>
        <!-- Main Content -->
        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
          <div class="form-container">
            <h2>Add New Product</h2>
            <form enctype="multipart/form-data">
              <!-- Product Fields -->
              <div class="mb-3">
                <label for="productName" class="form-label">Product Name</label>
                <input
                  type="text"
                  name="name"
                  class="form-control"
                  id="productName"
                  placeholder="Enter product name"
                  required
                />
              </div>
              <div class="mb-3">
                <label for="brandName" class="form-label">Brand Name</label>
                <input
                  type="text"
                  name="brand"
                  class="form-control"
                  id="brandName"
                  placeholder="Enter brand name"
                  required
                />
              </div>
              <div class="mb-3">
                <label for="availableSizes" class="form-label"
                  >Available Sizes (comma separated)</label
                >
                <input
                  type="text"
                  name="sizes"
                  class="form-control"
                  id="availableSizes"
                  placeholder="Enter sizes, e.g., 37,38,39,40"
                  required
                />
              </div>
              <div class="mb-3">
                <label for="color" class="form-label">Color</label>
                <input
                  type="text"
                  name="color"
                  class="form-control"
                  id="color"
                  placeholder="Color"
                  required
                />
              </div>
              <div class="mb-3">
                <label for="productDescription" class="form-label"
                  >Description</label
                >
                <textarea
                  class="form-control"
                  name="description"
                  id="productDescription"
                  rows="3"
                  placeholder="Enter product description"
                  required
                ></textarea>
              </div>
              <div class="row">
                <div class="col-md-6 mb-3">
                  <label for="productPrice" class="form-label">Price</label>
                  <input
                    type="number"
                    name="price"
                    class="form-control"
                    id="productPrice"
                    placeholder="Enter price"
                    min="1"
                    required
                  />
                </div>
                <div class="col-md-6 mb-3">
                  <label for="productStock" class="form-label">Stock</label>
                  <input
                    type="number"
                    name="stock"
                    class="form-control"
                    id="productStock"
                    placeholder="Enter stock quantity"
                    min="1"
                    required
                  />
                </div>
              </div>
              <div class="mb-3">
                <label for="productCategory" class="form-label">Category</label>
                <select
                  class="form-select"
                  id="productCategory"
                  name="category"
                  required
                >
                  <option selected>Select product category</option>
                  <% categories.forEach(category => { %>
                  <option value="<%= category._id %>">
                    <%= category.name %>
                  </option>
                  <% }) %>
                </select>
              </div>

              <!-- Image Upload Fields with Cropper -->
              <div class="mb-3">
                <label for="productImages" class="form-label"
                  >Product Images (3 images required)</label
                >
                <input
                  type="file"
                  class="form-control"
                  id="productImages"
                  name="images"
                  accept="image/*"
                  multiple
                  required
                  max="3"
                />
              </div>

              <!-- Container to hold all image previews and crop buttons -->
              <div id="imageCropContainer"></div>

              <input type="hidden" name="croppedImages" id="croppedImages" />

              <button type="submit" class="btn btn-dark mt-3" id="submit-btn">
                Add Product
              </button>
            </form>
          </div>
        </main>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <!-- <script>
      let croppers = []; // Array to store multiple croppers

      document
        .getElementById("productImages")
        .addEventListener("change", function (event) {
          const files = event.target.files;
          const container = document.getElementById("imageCropContainer");
          container.innerHTML = ""; // Clear any previous images or croppers

          if (files.length !== 3) {
            alert("Please upload exactly 3 images.");
            event.target.value = "";
            return;
          }

          for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const reader = new FileReader();

            // Create a wrapper div for each image and its crop button
            const cropContainer = document.createElement("div");
            cropContainer.classList.add("crop-container");

            const imagePreview = document.createElement("img");
            imagePreview.classList.add("image-preview");
            imagePreview.id = `imagePreview_${i}`;

            const cropButton = document.createElement("button");
            cropButton.type = "button";
            cropButton.classList.add("btn", "btn-primary", "mt-2");
            cropButton.textContent = "Crop Image";
            cropButton.id = `cropButton_${i}`;

            cropContainer.appendChild(imagePreview);
            cropContainer.appendChild(cropButton);
            container.appendChild(cropContainer);

            reader.onload = function (e) {
              imagePreview.src = e.target.result;
              imagePreview.style.display = "block";

              // Initialize Cropper.js for each image
              const cropper = new Cropper(imagePreview, {
                aspectRatio: 1,
                viewMode: 1,
                autoCropArea: 1,
              });
              croppers[i] = cropper;

              cropButton.addEventListener("click", function () {
                const canvas = cropper.getCroppedCanvas();
                const croppedImage = canvas.toDataURL("image/jpeg");

                // Append cropped image data to the hidden input
                let croppedImagesField =
                  document.getElementById("croppedImages").value;
                croppedImagesField = croppedImagesField
                  ? JSON.parse(croppedImagesField)
                  : [];
                croppedImagesField.push(croppedImage);
                document.getElementById("croppedImages").value =
                  JSON.stringify(croppedImagesField);

                alert("Image cropped successfully!");
              });
            };

            reader.readAsDataURL(file);
          }
        });

      
        document
  .getElementById("submit-btn")
  .addEventListener("click", function (e) {
    e.preventDefault(); // Prevent default form submission
    
    // Prepare FormData
    const formData = new FormData(document.querySelector("form"));

    // Get the cropped images from the hidden input field
    let croppedImagesField = document.getElementById("croppedImages").value;
    let croppedImages = croppedImagesField ? JSON.parse(croppedImagesField) : [];

    // Append each cropped image (as a Blob) to the FormData
    croppedImages.forEach((croppedImage, index) => {
      const byteString = atob(croppedImage.split(",")[1]);
      const arrayBuffer = new ArrayBuffer(byteString.length);
      const uint8Array = new Uint8Array(arrayBuffer);

      for (let i = 0; i < byteString.length; i++) {
        uint8Array[i] = byteString.charCodeAt(i);
      }

      const blob = new Blob([uint8Array], { type: "image/jpeg" });
      formData.append("croppedImages", blob, `croppedImage_${index}.jpg`);
    });

    // Validate images count before submission
    if (croppedImages.length !== 3) {
      alert("Please crop and add all 3 images.");
      return;
    }

    // Log FormData entries
    for (const [key, value] of formData.entries()) {
      console.log("fghgsdfhgfdsgh",key, value);
    }

    axios
      .post("/admin/products/add-products", formData, {
        headers: {
          "Content-Type": "multipart/form-data", 
        },
      })
      .then((response) => {
        console.log(response.data);
        alert("Product added successfully");
      })
      .catch((error) => {
        console.error("Error:", error);
      });
  });


    </script> -->
    <script>
      let croppers = []; // Array to store multiple croppers
    
      document
        .getElementById("productImages")
        .addEventListener("change", function (event) {
          const files = event.target.files;
          const container = document.getElementById("imageCropContainer");
          container.innerHTML = ""; // Clear any previous images or croppers
    
          if (files.length !== 3) {
            alert("Please upload exactly 3 images.");
            event.target.value = "";
            return;
          }
    
          for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const reader = new FileReader();
    
            // Create a wrapper div for each image and its crop button
            const cropContainer = document.createElement("div");
            cropContainer.classList.add("crop-container");
    
            const imagePreview = document.createElement("img");
            imagePreview.classList.add("image-preview");
            imagePreview.id = `imagePreview_${i}`;
    
            const cropButton = document.createElement("button");
            cropButton.type = "button";
            cropButton.classList.add("btn", "btn-primary", "mt-2");
            cropButton.textContent = "Crop Image";
            cropButton.id = `cropButton_${i}`;
    
            cropContainer.appendChild(imagePreview);
            cropContainer.appendChild(cropButton);
            container.appendChild(cropContainer);
    
            reader.onload = function (e) {
              imagePreview.src = e.target.result;
              imagePreview.style.display = "block";
    
              // Initialize Cropper.js for each image
              const cropper = new Cropper(imagePreview, {
                aspectRatio: 1,
                viewMode: 1,
                autoCropArea: 1,
              });
              croppers[i] = cropper;
    
              cropButton.addEventListener("click", function () {
                const canvas = cropper.getCroppedCanvas();
                const croppedImage = canvas.toDataURL("image/jpeg");
    
                // Append cropped image data to the hidden input
                let croppedImagesField = document.getElementById("croppedImages").value;
                croppedImagesField = croppedImagesField ? JSON.parse(croppedImagesField) : [];
                croppedImagesField.push(croppedImage);
                document.getElementById("croppedImages").value = JSON.stringify(croppedImagesField);
    
                alert("Image cropped successfully!");
              });
            };
    
            reader.readAsDataURL(file);
          }
        });
    
        document
  .getElementById("submit-btn")
  .addEventListener("click", function (e) {
    e.preventDefault(); // Prevent default form submission

    // Create a new FormData object
    const formData = new FormData();

    // Get values from form fields and append them to FormData
    formData.append("name", document.getElementById("productName").value);
    formData.append("brand", document.getElementById("brandName").value);
    formData.append("sizes", document.getElementById("availableSizes").value);
    formData.append("color", document.getElementById("color").value);
    formData.append("description", document.getElementById("productDescription").value);
    formData.append("price", document.getElementById("productPrice").value);
    formData.append("stock", document.getElementById("productStock").value);
    formData.append("category", document.getElementById("productCategory").value);
    
    // Get the cropped images from the hidden input field
    let croppedImagesField = document.getElementById("croppedImages").value;
    let croppedImages = croppedImagesField ? JSON.parse(croppedImagesField) : [];

    // Append each cropped image (as a Blob) to the FormData
    croppedImages.forEach((croppedImage, index) => {
      const byteString = atob(croppedImage.split(",")[1]);
      const arrayBuffer = new ArrayBuffer(byteString.length);
      const uint8Array = new Uint8Array(arrayBuffer);

      for (let i = 0; i < byteString.length; i++) {
        uint8Array[i] = byteString.charCodeAt(i);
      }

      const blob = new Blob([uint8Array], { type: "image/jpeg" });
      formData.append("croppedImages", blob, `croppedImage_${index}.jpg`);
    });

    // Validate images count before submission
    if (croppedImages.length !== 3) {
      alert("Please crop and add all 3 images.");
      return;
    }

    // Log FormData entries for debugging
    for (const [key, value] of formData.entries()) {
      console.log(key, value);
    }

    // Send the FormData via Axios
    axios
      .post("/admin/products/add-products", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      })
      .then((response) => {
        console.log(response.data);
        alert("Product added successfully");
      })
      .catch((error) => {
        console.error("Error:", error);
      });
  });

    </script>
    
  </body>
</html>
