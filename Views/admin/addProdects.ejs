<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Dashboard - Add Product</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <style>
      body {
        background-color: #f8f9fa;
      }
      .sidebar {
        height: 100vh;
        background-color: #343a40;
        padding-top: 20px;
      }
      .sidebar a {
        color: #ffffff;
        text-decoration: none;
        display: block;
        padding: 10px 20px;
      }
      .sidebar a:hover {
        background-color: #495057;
      }
      .form-container {
        margin: 30px;
      }
      .image-preview {
        max-width: 100%;
        height: 300px;
        display: none;
        margin-bottom: 10px;
      }
      .crop-container {
        margin-bottom: 20px;
      }
    </style>
  </head>
  <body>
    <div class="container-fluid">
      <div class="row">
        <!-- Sidebar -->
        <%- include('partials/sidebar') %>
        <!-- Main Content -->
        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
          <div class="form-container">
            <h2>Add New Product</h2>
            <form enctype="multipart/form-data" id="addProductForm">
              <!-- Product Fields -->
              <div class="mb-3">
                <label for="productName" class="form-label">Product Name</label>
                <input
                  type="text"
                  name="name"
                  class="form-control"
                  id="productName"
                  placeholder="Enter product name"
                  required
                />
              </div>
              <div class="mb-3">
                <label for="brandName" class="form-label">Brand Name</label>
                <input
                  type="text"
                  name="brand"
                  class="form-control"
                  id="brandName"
                  placeholder="Enter brand name"
                  required
                />
              </div>
              <div class="mb-3" id="sizeContainer">
                <label for="availableSizes" class="form-label"
                  >Available Sizes & Stock</label
                >
              </div>

              <button
                type="button"
                class="btn btn-secondary mb-3"
                id="addSizeStockBtn"
              >
                Add Size & Stock
              </button>
              <div class="mb-3">
                <label for="color" class="form-label">Color</label>
                <input
                  type="text"
                  name="color"
                  class="form-control"
                  id="color"
                  placeholder="Color"
                  required
                />
              </div>
              <div class="mb-3">
                <label for="productDescription" class="form-label"
                  >Description</label
                >
                <textarea
                  class="form-control"
                  name="description"
                  id="productDescription"
                  rows="3"
                  placeholder="Enter product description"
                  required
                ></textarea>
              </div>
              <div class="row">
                <div class="col-md-6 mb-3">
                  <label for="productPrice" class="form-label">Price</label>
                  <input
                    type="number"
                    name="price"
                    class="form-control"
                    id="productPrice"
                    placeholder="Enter price"
                    min="1"
                    required
                  />
                </div>
              </div>
              <div class="mb-3">
                <label for="productCategory" class="form-label">Category</label>
                <select
                  class="form-select"
                  id="productCategory"
                  name="category"
                  required
                >
                  <option selected>Select product category</option>
                  <% categories.forEach(category => { %>
                  <option value="<%= category._id %>">
                    <%= category.name %>
                  </option>
                  <% }) %>
                </select>
              </div>

              <!-- Image Upload Fields with Cropper -->
              <div class="mb-3">
                <label for="productImages" class="form-label"
                  >Product Images (3 images required)</label
                >
                <input
                  type="file"
                  class="form-control"
                  id="productImages"
                  name="images"
                  accept="image/*"
                  multiple
                  required
                />
              </div>

              <!-- Container to hold all image previews and crop buttons -->
              <div id="imageCropContainer"></div>

              <input type="hidden" name="croppedImages" id="croppedImages" />

              <button type="submit" class="btn btn-dark mt-3" id="submit-btn">
                Add Product
              </button>
            </form>
          </div>
        </main>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

    <script>
      let croppers = [];
  
      document.getElementById("addSizeStockBtn").addEventListener("click", function () {
          const sizeContainer = document.getElementById("sizeContainer");
          const sizeStockRow = document.createElement("div");
          sizeStockRow.classList.add("d-flex", "align-items-center", "mb-2");
          sizeStockRow.innerHTML = `
              <input type="text" name="size" class="form-control me-2" placeholder="Size" required style="width: 100px;" />
              <input type="number" name="stock" class="form-control me-2" placeholder="Stock" required style="width: 100px;" />
              <button type="button" class="btn btn-danger remove-size-stock">Remove</button>
          `;
          sizeContainer.appendChild(sizeStockRow);
      });
  
      document.getElementById("sizeContainer").addEventListener("click", function (e) {
          if (e.target.classList.contains("remove-size-stock")) {
              e.target.parentElement.remove();
          }
      });
  
      document.getElementById("productImages").addEventListener("change", function (event) {
          const files = event.target.files;
         
          const container = document.getElementById("imageCropContainer");
          container.innerHTML = "";
  
          for (let i = 0; i < files.length; i++) {
              const file = files[i];
              const reader = new FileReader();
  
              const cropContainer = document.createElement("div");
              cropContainer.classList.add("crop-container");
  
              const imagePreview = document.createElement("img");
              imagePreview.classList.add("image-preview");
              imagePreview.id = `imagePreview_${i}`;
  
              const cropButton = document.createElement("button");
              cropButton.type = "button";
              cropButton.classList.add("btn", "btn-primary", "mt-2");
              cropButton.textContent = "Crop Image";
              cropButton.id = `cropButton_${i}`;
  
              cropContainer.appendChild(imagePreview);
              cropContainer.appendChild(cropButton);
              container.appendChild(cropContainer);
  
              reader.onload = function (e) {
                  imagePreview.src = e.target.result;
                  imagePreview.style.display = "block";
  
                  const cropper = new Cropper(imagePreview, {
                      aspectRatio: 1,
                      viewMode: 1,
                      autoCropArea: 1,
                  });
                  croppers[i] = cropper;
  
                  cropButton.addEventListener("click", function () {
                      const canvas = cropper.getCroppedCanvas();
                      const croppedImage = canvas.toDataURL("image/jpeg");
  
                      let croppedImagesField = document.getElementById("croppedImages").value;
                      croppedImagesField = croppedImagesField ? JSON.parse(croppedImagesField) : [];
                      croppedImagesField.push(croppedImage);
                      document.getElementById("croppedImages").value = JSON.stringify(croppedImagesField);
  
                      alert("Image cropped successfully!");
                  });
              };
  
              reader.readAsDataURL(file);
          }
      });
  
      document.getElementById("addProductForm").addEventListener("submit", function (e) {
    e.preventDefault();

    const name = document.getElementById("productName").value.trim();
    const brand = document.getElementById("brandName").value.trim();
    const color = document.getElementById("color").value.trim();
    const description = document.getElementById("productDescription").value.trim();
    const price = document.getElementById("productPrice").value.trim();
    const category = document.getElementById("productCategory").value.trim();

    if (!name || !/^[A-Za-z'0-9\s]+$/.test(name)) {
        alert("Product name contains invalid characters or is empty.");
        return;
    }

    if (!brand || !/^[A-Za-z'0-9\s]+$/.test(brand)) {
        alert("Brand contains invalid characters or is empty.");
        return;
    }

    if (!color || !/^[A-Za-z'\s]+$/.test(color)) {
        alert("Color contains invalid characters or is empty.");
        return;
    }

    if (!description || !/^[A-Za-z'0-9\s]+$/.test(description)) {
        alert("Description contains invalid characters or is empty.");
        return;
    }

    if (!price || price <= 0) {
        alert("Price must be greater than zero.");
        return;
    }

    if (!category) {
        alert("Product category is required.");
        return;
    }

    const sizeStockData = [];
    let isValidSizeStok=false
    const sizeStockRows = document.querySelectorAll("#sizeContainer div");
    sizeStockRows.forEach((row) => {
        const size = row.querySelector('input[name="size"]').value.trim();
        const stock = row.querySelector('input[name="stock"]').value.trim();
        if (!size || !stock || stock < 1 || size < 1) {
          isValidSizeStok=true
            alert("Size or stock is missing or invalid.");
            return;
        }
        sizeStockData.push({ size, stock });
    });
    if(isValidSizeStok) return 
    const formData = new FormData();
    formData.append("name", name);
    formData.append("brand", brand);
    formData.append("color", color);
    formData.append("description", description);
    formData.append("price", price);
    formData.append("category", category);
    formData.append("availableSize", JSON.stringify(sizeStockData));

    const croppedImages = document.getElementById("croppedImages").value;
    const images = JSON.parse(croppedImages);
    if (images.length < 3) {
        alert("Please crop and select at least 3 images.");
        return;
    }

    images.forEach((image, index) => {
        const blob = dataURItoBlob(image);
        formData.append(`croppedImages`, blob, `croppedImage_${index}.jpg`); 
    });
    const okee=confirm("Are you sure add the prduct")
    if(!okee) return 
    axios
        .post("/admin/products/add-products", formData, {
            headers: {
                "Content-Type": "multipart/form-data",
            },
        })
        .then(function (response) {
            if (response.data.ok) {
                alert(response.data.msg);
                document.getElementById("addProductForm").reset();
                window.location.href = response.data.red;
            } else {
                alert(response.data.msg);
                return;
            }
        })
        .catch(function (error) {
            console.error("There was an error!", error);
        });
});

  
      function dataURItoBlob(dataURI) {
          const byteString = atob(dataURI.split(",")[1]);
          const mimeString = dataURI.split(",")[0].split(":")[1].split(";")[0];
          const ab = new ArrayBuffer(byteString.length);
          const ia = new Uint8Array(ab);
          for (let i = 0; i < byteString.length; i++) {
              ia[i] = byteString.charCodeAt(i);
          }
          return new Blob([ab], { type: mimeString });
      }
  </script>
  
  </body>
</html>
