<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Product Search and Offer</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/css/bootstrap-datepicker.min.css"
    />
    <style>
      .product-list {
        max-height: 300px;
        overflow-y: auto;
      }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css"
    />
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  </head>
  <body>
    <div class="container mt-5">
      <h1 class="mb-4">Product Search and Offer</h1>

      <!-- Search Form -->
      <div class="card mb-4">
        <div class="card-body">
          <h5 class="card-title">Product Search</h5>
          <form id="searchForm" class="d-flex">
            <input
              type="text"
              id="searchInput"
              class="form-control me-2"
              placeholder="Search products..."
            />
            <button type="submit" class="btn btn-primary">Search</button>
          </form>
        </div>
      </div>

      <!-- Product List -->
      <div class="card mb-4">
        <div class="card-body">
          <h5 class="card-title">Search Results</h5>
          <ul id="productList" class="list-group product-list"></ul>
        </div>
      </div>
    </div>

    <!-- Add Offer Modal -->
    <div
      class="modal fade"
      id="addOfferModal"
      tabindex="-1"
      aria-labelledby="addOfferModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="addOfferModalLabel">Add Offer</h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <form id="offerForm">
              <div class="mb-3">
                <label for="productDetails" class="form-label"
                  >Offer name</label
                >
                <input
                  class="form-control"
                  id="offerName"
                  rows="3"
                  required
                ></input>
              </div>
              <div class="mb-3">
                <label for="productDetails" class="form-label"
                  >Product Details</label
                >
                <textarea
                  class="form-control"
                  id="productDetails"
                  rows="3"
                  readonly
                ></textarea>
              </div>
              <div class="mb-3">
                <label for="originalPrice" class="form-label"
                  >Original Price</label
                >
                <input
                  type="number"
                  class="form-control"
                  id="originalPrice"
                  min="0"
                  step="0.01"
                  readonly
                />
              </div>
              <div class="mb-3">
                <label for="originalPrice" class="form-label"
                  >Current discount</label
                >
                <input
                  type="number"
                  class="form-control"
                  id="catDiscount"
                  min="0"
                  step="0.01"
                  readonly
                />
              </div>
              <div class="mb-3">
                <label for="discountedPrice" class="form-label">
                  Discounted
                </label>
                <input
                  type="number"
                  class="form-control"
                  id="discountedPrice"
                  min="0"
                  max="99"
                  required
                />
              </div>
              <div class="mb-3">
                <label for="startDate" class="form-label">Start Date</label>
                <input
                  type="text"
                  class="form-control datepicker"
                  id="startDate"
                  required
                />
              </div>
              <div class="mb-3">
                <label for="endDate" class="form-label">End Date</label>
                <input
                  type="text"
                  class="form-control datepicker"
                  id="endDate"
                  required
                />
              </div>
              <div class="mb-3">
                <label for="offerDescription" class="form-label"
                  >Offer Description</label
                >
                <textarea
                  class="form-control"
                  id="offerDescription"
                  rows="3"
                  required
                ></textarea>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Close
            </button>
            <button type="button" class="btn btn-primary" id="submitOfferBtn">
              Submit Offer
            </button>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/js/bootstrap-datepicker.min.js"></script>
    <script>
      const searchForm = document.getElementById("searchForm");
      const searchInput = document.getElementById("searchInput");
      const productList = document.getElementById("productList");
      const addOfferModal = new bootstrap.Modal(
        document.getElementById("addOfferModal")
      );
      const productDetails = document.getElementById("productDetails");
      const originalPrice = document.getElementById("originalPrice");
      const catDiscount=document.getElementById("catDiscount")
      const offerName=document.getElementById("offerName")
      const discountedPrice = document.getElementById("discountedPrice");
      const startDate = document.getElementById("startDate");
      const endDate = document.getElementById("endDate");
      const offerDescription = document.getElementById("offerDescription");
      const submitOfferBtn = document.getElementById("submitOfferBtn");
      let productName;
      let products = [];
      let selectedProduct = null;

      $(".datepicker").datepicker({
        format: "yyyy-mm-dd",
        autoclose: true,
        todayHighlight: true,
      });

      searchForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const searchQuery = searchInput.value;

        try {
          const response = await axios.post(
            `/admin/add/products/offer/search`,
            { searchQuery }
          );
          products = response.data.products; 
          displayProducts(products);
        } catch (err) {
          console.error("Error fetching search results:", err);
          alert(
            "An error occurred while fetching search results. Please try again."
          );
        }
      });

      function displayProducts(productsToShow) {
        productList.innerHTML = "";
        productsToShow.forEach((product) => {
          const li = document.createElement("li");
          li.className =
            "list-group-item d-flex justify-content-between align-items-center";
          li.innerHTML = `
                    <span>${product.name} - â‚¹${product.originalPrice.toFixed(2)}</span>
                    <button class="btn btn-primary btn-sm select-product" data-product-id="${
                      product._id
                    }">Select</button>
                `;
          productList.appendChild(li);
        });

        document.querySelectorAll(".select-product").forEach((button) => {
          button.addEventListener("click", (e) => {
            const productId = e.target.getAttribute("data-product-id");
            selectedProduct = products.find((p) => p._id === productId);
            showAddOfferModal(selectedProduct);
          });
        });
      }

      function showAddOfferModal(product) {
        productDetails.value = `${product.name} - ${product.description}`;
        originalPrice.value = product.price.toFixed(2);
        catDiscount.value=product.discountApplied
        discountedPrice.value = "";
        startDate.value = "";
        endDate.value = "";
        offerDescription.value = "";
        productName=product.name
        addOfferModal.show();
      }

      submitOfferBtn.addEventListener("click", async () => {
        if (!selectedProduct) return;

        const originalPriceValue = parseFloat(originalPrice.value);
        
        const discounted = Number(discountedPrice.value);
        const startDateValue = startDate.value;
        const endDateValue = endDate.value;
        const offerDescriptionValue = offerDescription.value;
        const categoryDiscount=parseInt(catDiscount.value);
        const name=offerName.value.trim()
        if (new Date(startDateValue) > new Date(endDateValue)) {
    showToast("Starting date must be less than or equal to the ending date.");
    return;
}

        if (!originalPriceValue || isNaN(originalPriceValue)) {
          showToast("Original price is required.");
          return;
        }
        if (!discounted || isNaN(discounted)) {
          showToast("Discounted price is required.");
          return;
        }
        if (!name || name.length<8) {
          showToast("offer name needed or offername greater than 7");
          return;
        }
        // if (discounted <= originalPriceValue) {
        //   showToast("Discounted price must be less than the original price.");
        //   return;
        // }
        if (discounted < categoryDiscount) {
  
          showToast("Discounted price must be greater  than the category discount price ");
          return;
        }
        if (!startDateValue) {
          showToast("Start date is required.");
          return;
        }
        if (!endDateValue) {
          showToast("End date is required.");
          return;
        }
        if (!offerDescriptionValue) {
          showToast("Offer description is required.");
          return;
        }

        const { isConfirmed } = await Swal.fire({
          title: "Confirm Offer Submission",
          text: "Are you sure you want to submit this offer?",
          icon: "warning",
          showCancelButton: true,
          confirmButtonText: "Yes, submit it!",
          cancelButtonText: "Cancel",
        });

        if (isConfirmed) {
          const offer = {
            name,
            productName,
            productId: selectedProduct._id,
            originalPrice: originalPriceValue,
            discountValue: discounted,
            startDate: startDateValue,
            endDate: endDateValue,
            offerDescription: offerDescriptionValue,
          };

          try {
            const response = await axios.post(
              "/admin/add/product-offers",
              offer
            );
           
            showToast(response.data.message)

            addOfferModal.hide();
            discountedPrice.value = "";
            startDate.value = "";
            endDate.value = "";
            offerDescription.value = "";
          } catch (error) {
            console.error("Error submitting offer:", error);
            showToast(
              "An error occurred while submitting the offer. Please try again."
            );
          }
        }
      });

      function showToast(message) {
        Toastify({
          text: message,
          duration: 2000,
          gravity: "top",
          position: "right",
          style: {
            background: "#333",
          },
          stopOnFocus: true,
        }).showToast();
      }
    </script>
  </body>
</html>
