<!DOCTYPE html>
<html lang="en">
  <head>
    <meta
    name="viewport"
    content="width=device-width, initial-scale=1, shrink-to-fit=no"
  />

  <link rel="shortcut icon" href="logo.png" />

  <meta name="author" content="CodePixar" />

  <meta name="description" content="" />

  <meta name="keywords" content="" />

  <meta charset="UTF-8" />

  <title>ST Shop</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css"
    />
    <link rel="stylesheet" href="css/linearicons.css" />
    <link rel="stylesheet" href="css/font-awesome.min.css" />
    <link rel="stylesheet" href="css/themify-icons.css" />
    <link rel="stylesheet" href="css/bootstrap.css" />
    <link rel="stylesheet" href="css/owl.carousel.css" />
    <link rel="stylesheet" href="css/nice-select.css" />
    <link rel="stylesheet" href="css/nouislider.min.css" />
    <link rel="stylesheet" href="css/ion.rangeSlider.css" />
    <link rel="stylesheet" href="css/ion.rangeSlider.skinFlat.css" />
    <link rel="stylesheet" href="css/magnific-popup.css" />
    <link rel="stylesheet" href="css/main.css" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css"
    />
    <script src="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>


    <style>
      .profile-container {
        max-width: 700px;
        margin: 50px auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }
      .profile-header {
        text-align: center;
        margin-bottom: 20px;
      }
      .profile-avatar {
        width: 80px;
        height: 80px;
        background-color: #ccc;
        border-radius: 50%;
        margin: 0 auto 10px;
      }
      .nav-tabs .nav-link {
        color: #555;
      }
      .nav-tabs .nav-link.active {
        background-color: #f8f9fa;
      }
      .order-summary {
        max-width: 600px;
        margin: 50px auto;
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 20px;
        background-color: #f8f9fa;
      }

      .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #ddd;
        padding-bottom: 10px;
        margin-bottom: 10px;
      }

      .order-header h5 {
        margin: 0;
      }

      .order-total {
        font-weight: bold;
        font-size: 24px;
      }

      .order-items {
        border-top: 1px solid #ddd;
        margin-top: 10px;
      }

      .order-item {
        display: flex;
        justify-content: space-between;
        padding: 10px 0;
      }

      .order-item + .order-item {
        border-top: 1px solid #ddd;
      }

      .item-name {
        font-weight: bold;
      }

      .quantity {
        font-size: 14px;
        color: #6c757d;
      }
    </style>
  </head>
  <body style="margin-top: 100px">
    <%- include('partials/header') %>

    <div class="profile-container py-5">
      <div class="profile-header">
        <div class="profile-avatar">
          <i class="bi bi-person-circle" style="font-size: 3rem"></i>
        </div>
        <h4><%= user.username %></h4>
        <p><%= user.email %></p>
      </div>

      <ul class="nav nav-tabs justify-content-center mb-4" id="profileTabs">
        <li class="nav-item">
          <a class="nav-link"  href="/profile">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="lucide lucide-user mr-2 h-4 w-4"
              data-id="15"
            >
              <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path>
              <circle cx="12" cy="7" r="4"></circle>
            </svg>

            Personal</a
          >
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/address">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="lucide lucide-home mr-2 h-4 w-4"
              data-id="17"
            >
              <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
              <polyline points="9 22 9 12 15 12 15 22"></polyline>
            </svg>
            Address
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link active" data-bs-toggle="tab" href="/orders">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="lucide lucide-package mr-2 h-4 w-4"
              data-id="19"
            >
              <path d="m7.5 4.27 9 5.15"></path>
              <path
                d="M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z"
              ></path>
              <path d="m3.3 7 8.7 5 8.7-5"></path>
              <path d="M12 22V12"></path>
            </svg>
            Orders</a
          >
        </li>
        <li class="nav-item">
          <a class="nav-link" data-bs-toggle="tab" href="#payment">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="lucide lucide-credit-card mr-2 h-4 w-4"
              data-id="21"
            >
              <rect width="20" height="14" x="2" y="5" rx="2"></rect>
              <line x1="2" x2="22" y1="10" y2="10"></line>
            </svg>
            Payment</a
          >
        </li>
        <li class="nav-item">
          <a class="nav-link"  href="/settings">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="lucide lucide-settings mr-2 h-4 w-4"
              data-id="23"
            >
              <path
                d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"
              ></path>
              <circle cx="12" cy="12" r="3"></circle>
            </svg>
            Settings</a
          >
        </li>
      </ul>

      <!-- order -->
      <div class="container">
        <% if (orders.length > 0) { %> <% orders.forEach(function(order) { %>
        <div class="order-summary shadow mb-4">
          <div class="order-header d-flex justify-content-between">
            <div>
              <h5>Order ID <%= order.orderId %></h5>
              <p><%= new Date(order.orderDate).toLocaleDateString() %></p>
              <% if (order.paymentStatus === 'Paid') { %>
                <div class="payment-status">
                  <span class="text-success">Payment Completed</span>
                </div>
              <% } else { %>
                <div class="retry-payment">
                  <% if (order.paymentMethod === 'Razorpay') { %>
                    <span class="text-danger">Payment Failed</span> <br>
                    <button 
                      class="btn btn-warning mt-3" 
                      onclick="retryPayment('<%= order._id %>')">
                      Retry Payment
                    </button>
                  <% } %>
                </div>
                
              <% } %>
            </div>
            <div>
              <td class="">
                <div class="d-flex align-items-center justify-content-around ">
                  <% if (order.isCanceld) { %>
                 
                    <span class="badge bg-danger">Canceled</span>
                <% } else { %>
                   
                    <span class="badge bg-<%= order.status === 'Delivered' ? 'success' : order.status === 'Pending' ? 'warning' : 'info' %>">
                        <%= order.status %>
                    </span>
                <% } %>
                <p>Shipped to: <%= order.address.type %></p>
              <!-- <% if (order.status !== 'Delivered' && !order.isCanceld) { %>
                
            <% } %> -->
                </div>
              
              
            </td>
            
              
            <% if (order.status === 'Delivered') { %>
              
              <a href="/order/bill/<%= order._id %>" class="btn btn-outline-light btn-sm bg-info">
                <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="lucide lucide-file-text h-4 w-4"
            >
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                <polyline points="14 2 14 8 20 8"></polyline>
                <line x1="16" x2="8" y1="13" y2="13"></line>
                <line x1="16" x2="8" y1="17" y2="17"></line>
                <polyline points="10 9 9 9 8 9"></polyline>
            </svg>
                View Bill
            </a>
            
              
                 
                 
              </button>
              <div class="d-flex align-items-center">
               
              
                <% if (new Date() < new Date(order.returnEndDate)) { %> 
                  <span class="ms-2 text-muted">
                    Eligible for return until <%= new Date(order.returnEndDate).toDateString() %>
                  </span>
                  
                <% } %>
              </div>
              
              
          <% } else if (!order.isCanceld&& !order.paymentStatus==="Paid") { %>
              
              <button
                  type="button"
                  class="btn btn-outline-danger btn-sm"
                  onclick="removeOrder(event, '<%= order._id %>')"
              >
                  <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="24"
                      height="24"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      class="lucide lucide-trash2 h-4 w-4"
                  >
                      <path d="M3 6h18"></path>
                      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path>
                      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
                      <line x1="10" x2="10" y1="11" y2="17"></line>
                      <line x1="14" x2="14" y1="11" y2="17"></line>
                  </svg>
              </button>
          <% } %>
          
            
              
            </div>
          </div>
          <div class="order-total">
            ₹<%= order.totalAmount.toFixed(2) %>
            <small class="d-block"><%= order.items.length %> item(s)</small>
          </div>

          <button
            class="btn btn-link"
            type="button"
            data-bs-toggle="collapse"
            data-bs-target="#orderItemsCollapse-<%= order._id %>"
          >
            View Order Items
          </button>

          <div class="collapse" id="orderItemsCollapse-<%= order._id %>">
            <div class="order-items">
              <% order.items.forEach(function(item, index) { %>
                <div class="order-item d-flex justify-content-between">
                  <div>
                    <a href="/singleprodect/<%= item.productId %>" style="font-style: none; text-decoration: none;">
                      <span class="item-name"><%= item.name %></span>
                    </a>
                    <p>Size: <%= item.size %></p>
                    <p class="quantity">Quantity: <%= item.quantity %></p>
                  </div>
                  <span>₹<%= (item.price * item.quantity).toFixed(2) %></span>
            
                  <% 
                    const currentDate = new Date();
                    const returnEndDate = new Date(order.returnEndDate); 
                  %>
            
                  <!-- Check if the return period has not ended -->
                  <% if (currentDate <= returnEndDate) { %>
                    <!-- Only show the "Return Item" button if the order is delivered -->
                    <% if (order.status === 'Delivered' && !item.isCanceled && !item.isReturned) { %>
                      <button class="btn btn-dark btn-sm ms-3" onclick="returnHandler('<%= order._id %>', '<%= item.productId %>', '<%= item.size %>',' <%= item.quantity %>')">
                        <i class="fas fa-undo-alt"></i> Return Item
                      </button>
                    <% } %>
                  <% } %>
            
                  <!-- Show "Canceled" label if item is canceled -->
                  <% if (item.isCanceled) { %>
                    <span class="text-danger">Canceled</span>
                  <% } else if (item.isReturned) { %>
                   
                    <span class="text-success">Returned <%= item.status %></span><br>
                    <% if (item.status === 'Rejected') { %>
                        <span class="text-danger">Our team will contact you.</span>
                    <% } %>
                   
                  <% } else if (order.status !== 'Delivered' && order.paymentStatus !== "Paid") { %>
                    <!-- Show "Delete" button only if the order is not delivered -->
                    <button 
                      class="btn btn-link text-danger" 
                      onclick="deleteOrderItem('<%= order._id %>', '<%= item.productId %>', '<%= item.size %>')">
                      <svg 
                        xmlns="http://www.w3.org/2000/svg" 
                        width="24" 
                        height="24" 
                        viewBox="0 0 24 24" 
                        fill="none" 
                        stroke="currentColor" 
                        stroke-width="2" 
                        stroke-linecap="round" 
                        stroke-linejoin="round" 
                        class="lucide lucide-trash-2">
                        <path d="M3 6h18"></path>
                        <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path>
                        <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
                        <line x1="10" x2="10" y1="11" y2="17"></line>
                        <line x1="14" x2="14" y1="11" y2="17"></line>
                      </svg>
                    </button>
                  <% } %>
                </div>
              <% }) %>
            </div>
            
          </div>
          
            
            
            
           
            
        </div>
        
        
        
        </div>
        <% }) %> <% } else { %>
        <p>No orders available.</p>
        <% } %>
      </div>

      <!-- order -->
    </div>
    <script src="js/vendor/jquery-2.2.4.min.js"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js"
      integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4"
      crossorigin="anonymous"
    ></script>
    <script src="js/vendor/bootstrap.min.js"></script>
    <script src="js/jquery.ajaxchimp.min.js"></script>
    <script src="js/jquery.nice-select.min.js"></script>
    <script src="js/jquery.sticky.js"></script>
    <script src="js/nouislider.min.js"></script>
    <script src="js/countdown.js"></script>
    <script src="js/jquery.magnific-popup.min.js"></script>
    <script src="js/owl.carousel.min.js"></script>
    <!--gmaps Js-->
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCjCGmQ0Uq4exrzdcL6rvxywDDOvfAu6eE"></script>
    <script src="js/gmaps.min.js"></script>
    <script src="js/main.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
      function removeOrder(e, orderId) {
          confirmAction("Are you sure?", "delete the order?", "Yes, remove it! :)").then((result) => {
              if (result.isConfirmed) {
                  axios.delete(`/removeOrder/${orderId}`)
                      .then((response) => {
                          showToast(response.data.msg);
                          if (response.data.ok) window.location.reload();
                      })
                      .catch((error) => {
                          showToast("There was an error adding the address:", error);
                      });
              }
          });
      }
      
      function confirmAction(title, text, confirmButtonText) {
          return Swal.fire({
              title: title,
              text: text,
              icon: "warning",
              showCancelButton: true,
              confirmButtonColor: "#3085d6",
              cancelButtonColor: "#d33",
              confirmButtonText: confirmButtonText,
          });
      }
      
      function showToast(message) {
          Toastify({
              text: message,
              duration: 2000,
              gravity: "top",
              position: "right",
              backgroundColor: "#333",
              stopOnFocus: true,
          }).showToast();
      }
      
      function deleteOrderItem(orderId, productId, size) {
          Swal.fire({
              title: 'Are you sure?',
              text: 'You won\'t be able to revert this!',
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#3085d6',
              cancelButtonColor: '#d33',
              confirmButtonText: 'Yes, delete it!'
          }).then((result) => {
              if (result.isConfirmed) {
                  axios.put(`/delete-order-item/${orderId}/${productId}`, { size: size })
                      .then(response => {
                          if (!response.data.ok) return showToast(response.data.msg);
                          Swal.fire({
                              icon: 'success',
                              title: 'Deleted!',
                              text: 'The item has been removed from your order.',
                              confirmButtonText: 'OK'
                          }).then(() => {
                              showToast(response.data.msg);
                              setTimeout(() => window.location.reload(), 1000);
                          });
                      })
                      .catch(error => {
                          Swal.fire({
                              icon: 'error',
                              title: 'Oops...',
                              text: 'There was an error deleting the item. Please try again later.',
                              confirmButtonText: 'OK'
                          });
                          console.error('Error deleting item:', error);
                      });
              }
          });
      }
      
      function retryPayment(orderId) {
          axios.post("/payment/retry-payment", { orderId })
              .then((response) => {
                  const { amount, currency, newOderId } = response.data;
                  var options = {
                      "key": "rzp_test_0NNl9o6nbS0KBP",
                      "amount": amount,
                      "currency": currency,
                      "name": "ST SHOP",
                      "description": "Order Payment",
                      "order_id": newOderId,
                      "handler": function (responseV) {
                          showToast("Payment Successful: " + responseV.razorpay_payment_id);
                          axios.post('/payment/retry-veryfy-payment', {
                              id: orderId,
                              orderId: newOderId,
                              paymentId: responseV.razorpay_payment_id,
                              signature: responseV.razorpay_signature
                          }).then(verificationResponse => {
                              console.log(verificationResponse);
                              setTimeout(() => window.location.href = '/orders', 1000);
                          }).catch(err => {
                              showToast("Payment verification failed.");
                              console.error("Verification failed:", err);
                          });
                      },
                      "prefill": {
                          "name": "Customer Name",
                          "email": "customer@example.com",
                          "contact": "9999999999"
                      },
                      "theme": {
                          "color": "#F37254"
                      }
                  };
                  var rzp1 = new Razorpay(options);
                  rzp1.open();
              })
              .catch(err => {
                  showToast("Failed to retry payment.");
                  console.error("Retry payment failed:", err);
              });
      }
      
      function returnHandler(orderId, productId, size, qty) {
          Swal.fire({
              title: 'Return Confirmation',
              text: 'Please provide a reason for the return:',
              input: 'text',
              inputPlaceholder: 'Enter the reason',
              inputValidator: (value) => {
                  if (!value) return 'You need to provide a reason!';
                  const trimmedValue = value.trim();
                  if (trimmedValue.length < 8) return 'The reason must be at least 8 characters long!';
                  if (trimmedValue.length === 0) return 'Special characters and spaces are not allowed!';
              },
              showCancelButton: true,
              confirmButtonText: 'Submit Return',
              cancelButtonText: 'Cancel',
          }).then((result) => {
              if (result.isConfirmed) {
                  const reason = result.value;
                  const data = { orderId: orderId, productId: productId, size: size, reason: reason, qty: qty };
      
                  axios.post('/orders/return', data)
                      .then(response => {
                          if (response.data.ok) {
                              Swal.fire({
                                  icon: 'success',
                                  title: 'Success',
                                  text: response.data.msg,
                              }).then(() => {
                                  setTimeout(() => window.location.reload(), 2000);
                              });
                          } else {
                              Swal.fire({
                                  icon: 'error',
                                  title: 'Error',
                                  text: response.data.msg,
                              });
                          }
                      })
                      .catch(error => {
                          console.error('There was an error processing the return:', error);
                          Swal.fire({
                              icon: 'error',
                              title: 'Error',
                              text: 'There was an error processing your return. Please try again.',
                          });
                      });
              }
          });
      }
      </script>
      
  </body>
</html>
